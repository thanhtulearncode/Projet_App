{"ast":null,"code":"var _jsxFileName = \"/Users/yassinebenbelgacem/Projet_App/frontend/src/components/Game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Board from './Board';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = ({\n  settings\n}) => {\n  _s();\n  const [board, setBoard] = useState([]);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [currentPlayer, setCurrentPlayer] = useState('player1');\n  const [message, setMessage] = useState('Chargement du jeu...');\n\n  // D√©finir les couleurs des joueurs en fonction de la paire de couleurs s√©lectionn√©e\n  const getPlayerColors = () => {\n    switch (settings === null || settings === void 0 ? void 0 : settings.colorPair) {\n      case 'red-green':\n        return {\n          player1: 'red',\n          player2: 'green'\n        };\n      case 'orange-blue':\n        return {\n          player1: 'orange',\n          player2: 'blue'\n        };\n      default:\n        return {\n          player1: 'white',\n          player2: 'black'\n        };\n    }\n  };\n  const playerColors = getPlayerColors();\n\n  // Charger l'√©tat initial du plateau\n  useEffect(() => {\n    fetchBoard();\n  }, []);\n  const fetchBoard = async () => {\n    try {\n      // Ajouter les couleurs s√©lectionn√©es comme param√®tres\n      const params = new URLSearchParams({\n        colorPair: (settings === null || settings === void 0 ? void 0 : settings.colorPair) || 'black-white'\n      });\n      const response = await fetch(`http://localhost:8000/board?${params}`);\n      if (!response.ok) {\n        throw new Error('Erreur r√©seau');\n      }\n      const data = await response.json();\n      setBoard(data);\n      setMessage(`C'est au tour des ${playerColors.player1}`);\n    } catch (error) {\n      console.error('Erreur lors du chargement du plateau:', error);\n      setMessage('Erreur de connexion au serveur. Le backend est-il d√©marr√©?');\n\n      // Cr√©er un plateau de test si le backend n'est pas disponible\n      const testBoard = Array(8).fill().map(() => Array(8).fill([{\n        type: 'square',\n        color: null,\n        height: 1\n      }]));\n      setBoard(testBoard);\n    }\n  };\n\n  // Utiliser les param√®tres de difficult√© et couleurs lors des appels √† l'API\n  const fetchValidMoves = async (row, col) => {\n    try {\n      // Transmettre le mode, la difficult√© et les couleurs au backend\n      const params = new URLSearchParams({\n        mode: (settings === null || settings === void 0 ? void 0 : settings.mode) || 'local',\n        difficulty: (settings === null || settings === void 0 ? void 0 : settings.difficulty) || 'medium',\n        colorPair: (settings === null || settings === void 0 ? void 0 : settings.colorPair) || 'black-white'\n      });\n      const response = await fetch(`http://localhost:8000/valid_moves/${row}/${col}?${params}`);\n      if (!response.ok) {\n        throw new Error('Erreur r√©seau');\n      }\n      const data = await response.json();\n      setValidMoves(data.validMoves);\n    } catch (error) {\n      console.error('Erreur lors de la r√©cup√©ration des mouvements valides:', error);\n    }\n  };\n  const handleSelectPiece = async (row, col) => {\n    // Logique de s√©lection de pi√®ce\n    setSelectedPiece({\n      row,\n      col\n    });\n    setMessage('Pi√®ce s√©lectionn√©e');\n\n    // R√©cup√©rer les mouvements valides depuis le backend\n    fetchValidMoves(row, col);\n  };\n  const handleMove = async (row, col) => {\n    // Logique de d√©placement simplifi√©e pour le moment\n    setMessage('D√©placement effectu√©');\n    setSelectedPiece(null);\n    setValidMoves([]);\n\n    // Simuler un changement de joueur\n    setCurrentPlayer(currentPlayer === 'player1' ? 'player2' : 'player1');\n  };\n  const resetGame = async () => {\n    try {\n      // Inclure les couleurs dans la r√©initialisation\n      const params = new URLSearchParams({\n        colorPair: (settings === null || settings === void 0 ? void 0 : settings.colorPair) || 'black-white'\n      });\n      await fetch(`http://localhost:8000/reset?${params}`, {\n        method: 'POST'\n      });\n      fetchBoard();\n      setSelectedPiece(null);\n      setValidMoves([]);\n      setCurrentPlayer('player1');\n      setMessage('Nouvelle partie commenc√©e');\n    } catch (error) {\n      console.error('Erreur lors de la r√©initialisation:', error);\n      setMessage('Erreur de connexion au serveur');\n    }\n  };\n\n  // Fonction pour afficher le nom de la couleur en fran√ßais\n  const getColorName = color => {\n    switch (color) {\n      case 'white':\n        return 'Blanc';\n      case 'black':\n        return 'Noir';\n      case 'red':\n        return 'Rouge';\n      case 'green':\n        return 'Vert';\n      case 'orange':\n        return 'Orange';\n      case 'blue':\n        return 'Bleu';\n      default:\n        return color;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [(settings === null || settings === void 0 ? void 0 : settings.mode) === 'ai' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ai-indicator\",\n        children: [\"IA: \", settings.difficulty === 'easy' ? 'Facile üòä' : settings.difficulty === 'medium' ? 'Moyen üòê' : 'Difficile üòà']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"color-indicator\",\n        children: [\"Couleurs: \", getColorName(playerColors.player1), \" vs \", getColorName(playerColors.player2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Joueur actuel: \", getColorName(playerColors[currentPlayer])]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"Nouvelle partie\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), board.length > 0 ? /*#__PURE__*/_jsxDEV(Board, {\n      board: board,\n      selectedPiece: selectedPiece,\n      validMoves: validMoves,\n      onSelectPiece: handleSelectPiece,\n      onMove: handleMove,\n      playerColors: playerColors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Chargement du plateau...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"Iz06kGiMwLX3knWFm0901jQGAmE=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Board","jsxDEV","_jsxDEV","Game","settings","_s","board","setBoard","selectedPiece","setSelectedPiece","validMoves","setValidMoves","currentPlayer","setCurrentPlayer","message","setMessage","getPlayerColors","colorPair","player1","player2","playerColors","fetchBoard","params","URLSearchParams","response","fetch","ok","Error","data","json","error","console","testBoard","Array","fill","map","type","color","height","fetchValidMoves","row","col","mode","difficulty","handleSelectPiece","handleMove","resetGame","method","getColorName","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","onSelectPiece","onMove","_c","$RefreshReg$"],"sources":["/Users/yassinebenbelgacem/Projet_App/frontend/src/components/Game.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Board from './Board';\n\nconst Game = ({ settings }) => {\n  const [board, setBoard] = useState([]);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [currentPlayer, setCurrentPlayer] = useState('player1');\n  const [message, setMessage] = useState('Chargement du jeu...');\n  \n  // D√©finir les couleurs des joueurs en fonction de la paire de couleurs s√©lectionn√©e\n  const getPlayerColors = () => {\n    switch (settings?.colorPair) {\n      case 'red-green':\n        return { player1: 'red', player2: 'green' };\n      case 'orange-blue':\n        return { player1: 'orange', player2: 'blue' };\n      default:\n        return { player1: 'white', player2: 'black' };\n    }\n  };\n  \n  const playerColors = getPlayerColors();\n\n  // Charger l'√©tat initial du plateau\n  useEffect(() => {\n    fetchBoard();\n  }, []);\n\n  const fetchBoard = async () => {\n    try {\n      // Ajouter les couleurs s√©lectionn√©es comme param√®tres\n      const params = new URLSearchParams({\n        colorPair: settings?.colorPair || 'black-white'\n      });\n      \n      const response = await fetch(`http://localhost:8000/board?${params}`);\n      if (!response.ok) {\n        throw new Error('Erreur r√©seau');\n      }\n      const data = await response.json();\n      setBoard(data);\n      setMessage(`C'est au tour des ${playerColors.player1}`);\n    } catch (error) {\n      console.error('Erreur lors du chargement du plateau:', error);\n      setMessage('Erreur de connexion au serveur. Le backend est-il d√©marr√©?');\n      \n      // Cr√©er un plateau de test si le backend n'est pas disponible\n      const testBoard = Array(8).fill().map(() => Array(8).fill([{type: 'square', color: null, height: 1}]));\n      setBoard(testBoard);\n    }\n  };\n\n  // Utiliser les param√®tres de difficult√© et couleurs lors des appels √† l'API\n  const fetchValidMoves = async (row, col) => {\n    try {\n      // Transmettre le mode, la difficult√© et les couleurs au backend\n      const params = new URLSearchParams({\n        mode: settings?.mode || 'local',\n        difficulty: settings?.difficulty || 'medium',\n        colorPair: settings?.colorPair || 'black-white'\n      });\n      \n      const response = await fetch(`http://localhost:8000/valid_moves/${row}/${col}?${params}`);\n      if (!response.ok) {\n        throw new Error('Erreur r√©seau');\n      }\n      const data = await response.json();\n      setValidMoves(data.validMoves);\n    } catch (error) {\n      console.error('Erreur lors de la r√©cup√©ration des mouvements valides:', error);\n    }\n  };\n\n  const handleSelectPiece = async (row, col) => {\n    // Logique de s√©lection de pi√®ce\n    setSelectedPiece({ row, col });\n    setMessage('Pi√®ce s√©lectionn√©e');\n    \n    // R√©cup√©rer les mouvements valides depuis le backend\n    fetchValidMoves(row, col);\n  };\n\n  const handleMove = async (row, col) => {\n    // Logique de d√©placement simplifi√©e pour le moment\n    setMessage('D√©placement effectu√©');\n    setSelectedPiece(null);\n    setValidMoves([]);\n    \n    // Simuler un changement de joueur\n    setCurrentPlayer(currentPlayer === 'player1' ? 'player2' : 'player1');\n  };\n\n  const resetGame = async () => {\n    try {\n      // Inclure les couleurs dans la r√©initialisation\n      const params = new URLSearchParams({\n        colorPair: settings?.colorPair || 'black-white'\n      });\n      \n      await fetch(`http://localhost:8000/reset?${params}`, { method: 'POST' });\n      fetchBoard();\n      setSelectedPiece(null);\n      setValidMoves([]);\n      setCurrentPlayer('player1');\n      setMessage('Nouvelle partie commenc√©e');\n    } catch (error) {\n      console.error('Erreur lors de la r√©initialisation:', error);\n      setMessage('Erreur de connexion au serveur');\n    }\n  };\n\n  // Fonction pour afficher le nom de la couleur en fran√ßais\n  const getColorName = (color) => {\n    switch (color) {\n      case 'white': return 'Blanc';\n      case 'black': return 'Noir';\n      case 'red': return 'Rouge';\n      case 'green': return 'Vert';\n      case 'orange': return 'Orange';\n      case 'blue': return 'Bleu';\n      default: return color;\n    }\n  };\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-info\">\n        {settings?.mode === 'ai' && (\n          <div className=\"ai-indicator\">\n            IA: {settings.difficulty === 'easy' ? 'Facile üòä' : \n                settings.difficulty === 'medium' ? 'Moyen üòê' : 'Difficile üòà'}\n          </div>\n        )}\n        <div className=\"color-indicator\">\n          Couleurs: {getColorName(playerColors.player1)} vs {getColorName(playerColors.player2)}\n        </div>\n        <div>{message}</div>\n        <div>Joueur actuel: {getColorName(playerColors[currentPlayer])}</div>\n        <button onClick={resetGame}>Nouvelle partie</button>\n      </div>\n      \n      {board.length > 0 ? (\n        <Board \n          board={board} \n          selectedPiece={selectedPiece}\n          validMoves={validMoves}\n          onSelectPiece={handleSelectPiece}\n          onMove={handleMove}\n          playerColors={playerColors}\n        />\n      ) : (\n        <p>Chargement du plateau...</p>\n      )}\n    </div>\n  );\n};\n\nexport default Game;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}