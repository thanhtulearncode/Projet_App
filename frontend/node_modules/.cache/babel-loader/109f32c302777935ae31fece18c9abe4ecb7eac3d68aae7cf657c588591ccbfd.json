{"ast":null,"code":"var _jsxFileName = \"/Users/yassinebenbelgacem/Projet_App/frontend/src/components/Board.jsx\";\nimport React from 'react';\nimport Cell from './Cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = ({\n  board,\n  selectedPiece,\n  validMoves,\n  onSelectPiece,\n  onMove,\n  playerColors\n}) => {\n  const handleCellClick = (row, col) => {\n    // Si une pièce est déjà sélectionnée et que la case cliquée est un mouvement valide\n    if (selectedPiece && validMoves.some(move => move[0] === row && move[1] === col)) {\n      onMove(row, col);\n    } else {\n      // Sinon, on essaie de sélectionner une pièce\n      onSelectPiece(row, col);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((stack, colIndex) => {\n        const isSelected = (selectedPiece === null || selectedPiece === void 0 ? void 0 : selectedPiece.row) === rowIndex && (selectedPiece === null || selectedPiece === void 0 ? void 0 : selectedPiece.col) === colIndex;\n        const isValidMove = validMoves.some(move => move[0] === rowIndex && move[1] === colIndex);\n        return /*#__PURE__*/_jsxDEV(Cell, {\n          stack: stack,\n          onClick: () => handleCellClick(rowIndex, colIndex),\n          isSelected: isSelected,\n          isValidMove: isValidMove,\n          playerColors: playerColors\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 29\n        }, this);\n      })\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n};\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","Cell","jsxDEV","_jsxDEV","Board","board","selectedPiece","validMoves","onSelectPiece","onMove","playerColors","handleCellClick","row","col","some","move","className","children","map","rowIndex","stack","colIndex","isSelected","isValidMove","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yassinebenbelgacem/Projet_App/frontend/src/components/Board.jsx"],"sourcesContent":["import React from 'react';\nimport Cell from './Cell';\n\nconst Board = ({ board, selectedPiece, validMoves, onSelectPiece, onMove, playerColors }) => {\n    const handleCellClick = (row, col) => {\n        // Si une pièce est déjà sélectionnée et que la case cliquée est un mouvement valide\n        if (selectedPiece && validMoves.some(move => move[0] === row && move[1] === col)) {\n            onMove(row, col);\n        } else {\n            // Sinon, on essaie de sélectionner une pièce\n            onSelectPiece(row, col);\n        }\n    };\n\n    return (\n        <div className=\"board\">\n            {board.map((row, rowIndex) => (\n                <div key={rowIndex} className=\"row\">\n                    {row.map((stack, colIndex) => {\n                        const isSelected = selectedPiece?.row === rowIndex && selectedPiece?.col === colIndex;\n                        const isValidMove = validMoves.some(move => move[0] === rowIndex && move[1] === colIndex);\n                        \n                        return (\n                            <Cell\n                                key={colIndex}\n                                stack={stack}\n                                onClick={() => handleCellClick(rowIndex, colIndex)}\n                                isSelected={isSelected}\n                                isValidMove={isValidMove}\n                                playerColors={playerColors}\n                            />\n                        );\n                    })}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default Board;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,KAAK,GAAGA,CAAC;EAAEC,KAAK;EAAEC,aAAa;EAAEC,UAAU;EAAEC,aAAa;EAAEC,MAAM;EAAEC;AAAa,CAAC,KAAK;EACzF,MAAMC,eAAe,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;IAClC;IACA,IAAIP,aAAa,IAAIC,UAAU,CAACO,IAAI,CAACC,IAAI,IAAIA,IAAI,CAAC,CAAC,CAAC,KAAKH,GAAG,IAAIG,IAAI,CAAC,CAAC,CAAC,KAAKF,GAAG,CAAC,EAAE;MAC9EJ,MAAM,CAACG,GAAG,EAAEC,GAAG,CAAC;IACpB,CAAC,MAAM;MACH;MACAL,aAAa,CAACI,GAAG,EAAEC,GAAG,CAAC;IAC3B;EACJ,CAAC;EAED,oBACIV,OAAA;IAAKa,SAAS,EAAC,OAAO;IAAAC,QAAA,EACjBZ,KAAK,CAACa,GAAG,CAAC,CAACN,GAAG,EAAEO,QAAQ,kBACrBhB,OAAA;MAAoBa,SAAS,EAAC,KAAK;MAAAC,QAAA,EAC9BL,GAAG,CAACM,GAAG,CAAC,CAACE,KAAK,EAAEC,QAAQ,KAAK;QAC1B,MAAMC,UAAU,GAAG,CAAAhB,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEM,GAAG,MAAKO,QAAQ,IAAI,CAAAb,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEO,GAAG,MAAKQ,QAAQ;QACrF,MAAME,WAAW,GAAGhB,UAAU,CAACO,IAAI,CAACC,IAAI,IAAIA,IAAI,CAAC,CAAC,CAAC,KAAKI,QAAQ,IAAIJ,IAAI,CAAC,CAAC,CAAC,KAAKM,QAAQ,CAAC;QAEzF,oBACIlB,OAAA,CAACF,IAAI;UAEDmB,KAAK,EAAEA,KAAM;UACbI,OAAO,EAAEA,CAAA,KAAMb,eAAe,CAACQ,QAAQ,EAAEE,QAAQ,CAAE;UACnDC,UAAU,EAAEA,UAAW;UACvBC,WAAW,EAAEA,WAAY;UACzBb,YAAY,EAAEA;QAAa,GALtBW,QAAQ;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAMhB,CAAC;MAEV,CAAC;IAAC,GAfIT,QAAQ;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAgBb,CACR;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACC,EAAA,GAlCIzB,KAAK;AAoCX,eAAeA,KAAK;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}